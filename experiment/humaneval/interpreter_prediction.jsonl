{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n    "}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(': \n            if len(stack) == 0:\n                current_group = char\n            else:\n                current_group += char\n            stack.append(char)\n        elif char == ')':\n            current_group += char\n            stack.pop()\n            if len(stack) == 0:\n                result.append(current_group)\n                current_group = ''\n\n    return result\n\n                        "}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n\n                        "}
{"task_id": "HumanEval/3", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n    "}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n    "}
{"task_id": "HumanEval/5", "completion": "if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n    "}
{"task_id": "HumanEval/6", "completion": "groups = paren_string.split()\n    max_depths = []\n\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n\n        max_depths.append(max_depth)\n\n    return max_depths\n    "}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]\n    "}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return (0, 1)\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n        \n    return (total_sum, total_product)\n    "}
{"task_id": "HumanEval/9", "completion": "rolling_max = []\n    current_max = float('-inf')\n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max.append(current_max)\n    return rolling_max\n    "}
{"task_id": "HumanEval/10", "completion": "# Check for empty string\n    if string == '':\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix that needs to be mirrored\n            prefix = string[:i]\n            # Create the palindrome\n            return string + prefix[::-1]\n    "}
{"task_id": "HumanEval/11", "completion": "return ''.join('1' if a[i] != b[i] else '0' for i in range(len(a)))\n    "}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n    "}
{"task_id": "HumanEval/13", "completion": "while b:\n    a, b = b, a % b\nreturn a\n    "}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(1, len(string) + 1)]\n    "}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n + 1))\n    "}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))\n    "}
{"task_id": "HumanEval/17", "completion": "notes = music_string.split()\nnote_to_beats = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n}\n\nreturn [note_to_beats[note] for note in notes]\n    "}
{"task_id": "HumanEval/18", "completion": "count = 0\nstart = 0\nwhile True:\n    start = string.find(substring, start)\n    if start == -1:\n        break\n    count += 1\n    start += 1\nreturn count\n    "}
{"task_id": "HumanEval/19", "completion": "    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n        'four': 4, 'five': 5, 'six': 6, 'seven': 7,\n        'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string and map to integers\n    num_list = [num_map[num] for num in numbers.split()]\n    \n    # Sort the list of numbers\n    num_list.sort()\n    \n    # Convert back to the word representation\n    sorted_numbers = ' '.join(num_map_inv[num] for num in num_list)\n    \n    return sorted_numbers\n    "}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n    "}
{"task_id": "HumanEval/21", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n    "}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]\n    "}
{"task_id": "HumanEval/23", "completion": "return len(string)\n    "}
{"task_id": "HumanEval/24", "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    "}
{"task_id": "HumanEval/25", "completion": "factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n    "}
{"task_id": "HumanEval/26", "completion": "count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    return [num for num in numbers if count[num] == 1]\n    "}
{"task_id": "HumanEval/27", "completion": "return string.swapcase()\n    "}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)\n    "}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]\n    "}
{"task_id": "HumanEval/30", "completion": "return [x for x in l if x > 0]\n    "}
{"task_id": "HumanEval/31", "completion": "if n < 2:\n    return False\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        return False\nreturn True\n    "}
{"task_id": "HumanEval/32", "completion": "        \"\"\"Calculates the derivative of the polynomial at point x.\"\"\"\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\n    x0 = 0  # Initial guess\n    for _ in range(100):  # Limit iterations to avoid infinite loops\n        fx0 = poly(xs, x0)\n        dfx0 = derivative(xs, x0)\n        if dfx0 == 0:  # Avoid division by zero\n            raise ValueError(\"Derivative is zero; try a different initial guess.\")\n        x1 = x0 - fx0 / dfx0  # Newton-Raphson step\n        if abs(x1 - x0) < 1e-7:  # Convergence criteria\n            return x1\n        x0 = x1\n    \n    raise ValueError(\"Root finding did not converge.\")\n    "}
{"task_id": "HumanEval/33", "completion": "new_list = l[:]\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    \n    for index, value in enumerate(new_list):\n        if index % 3 == 0:\n            new_list[index] = sorted_values.pop(0)\n    \n    return new_list\n    "}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))\n    "}
{"task_id": "HumanEval/35", "completion": "return max(l)\n    "}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n    "}
{"task_id": "HumanEval/37", "completion": "even_vals = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\nresult = []\n\nfor i in range(len(l)):\n    if i % 2 == 0:\n        result.append(even_vals.pop(0))\n    else:\n        result.append(l[i])\n\nreturn result\n    "}
{"task_id": "HumanEval/38", "completion": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n    "}
{"task_id": "HumanEval/39", "completion": "    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nfib1, fib2 = 1, 1\ncount = 0\nwhile True:\n    fib1, fib2 = fib2, fib1 + fib2\n    if is_prime(fib2):\n        count += 1\n        if count == n:\n            return fib2\n    "}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    pairs = set()\n    for number in l:\n        if -number in pairs:\n            return True\n        for x in seen:\n            pairs.add(x + number)\n        seen.add(number)\n    return False\n                        "}
{"task_id": "HumanEval/41", "completion": "    return n * n\n    "}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]\n    "}
{"task_id": "HumanEval/43", "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n    "}
{"task_id": "HumanEval/44", "completion": "if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result\n    "}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h\n    "}
{"task_id": "HumanEval/46", "completion": "if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    # Initial values corresponding to fib4(0), fib4(1), fib4(2) and fib4(3)\n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        # Calculate fib4(i) as the sum of the previous four values\n        fib_n = a + b + c + d\n        # Update the previous values\n        a, b, c, d = b, c, d, fib_n\n\n    return d\n    "}
{"task_id": "HumanEval/47", "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    "}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]\n    "}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)\n    "}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    "}
{"task_id": "HumanEval/51", "completion": "return ''.join(char for char in text if char.lower() not in 'aeiou')\n    "}
{"task_id": "HumanEval/52", "completion": "return all(x < t for x in l)\n    "}
{"task_id": "HumanEval/53", "completion": "return x + y\n    "}
{"task_id": "HumanEval/54", "completion": "return set(s0) == set(s1)\n    "}
{"task_id": "HumanEval/55", "completion": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n    "}
{"task_id": "HumanEval/56", "completion": "balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n    "}
{"task_id": "HumanEval/57", "completion": "increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n    "}
{"task_id": "HumanEval/58", "completion": "return sorted(set(l1) & set(l2))\n    "}
{"task_id": "HumanEval/59", "completion": "largest = None\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            largest = i\n            n //= i\n    if n > 1:\n        largest = n\n    return largest\n    "}
{"task_id": "HumanEval/60", "completion": "return n * (n + 1) // 2\n    "}
{"task_id": "HumanEval/61", "completion": "    balance = 0\n    for char in brackets:\n        if char == '(':  \n            balance += 1\n        elif char == ')':  \n            balance -= 1\n        # If balance goes negative, there's a closing bracket without a matching opening bracket\n        if balance < 0:\n            return False\n    # Finally, check if we have a balanced count of opening and closing brackets\n    return balance == 0\n                        "}
{"task_id": "HumanEval/62", "completion": "return [i * coef for i, coef in enumerate(xs)][1:]\n    "}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n                        "}
{"task_id": "HumanEval/64", "completion": "count = 0\n    vowels = set('aeiouAEIOU')\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n            \n    # Check if the last character is 'y' and includes it if needed\n    if s and s[-1].lower() == 'y':\n        count += 1\n        \n    return count\n    "}
{"task_id": "HumanEval/65", "completion": "x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n    "}
{"task_id": "HumanEval/66", "completion": "total_sum = sum(ord(char) for char in s if char.isupper())\n    return total_sum\n    "}
{"task_id": "HumanEval/67", "completion": "import re\n    apples = int(re.search(r'(\\d+) apples', s).group(1))\n    oranges = int(re.search(r'(\\d+) oranges', s).group(1))\n    return n - apples - oranges\n    "}
{"task_id": "HumanEval/68", "completion": "smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n            \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]\n    "}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\n    frequency = Counter(lst)\n    result = -1\n\n    for num in sorted(frequency.keys(), reverse=True):\n        if frequency[num] >= num:\n            result = num\n            break\n    \n    return result\n    "}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while lst:\n        result.append(min(lst))  # Add minimum value\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))  # Add maximum value\n            lst.remove(max(lst))\n    return result\n                        "}
{"task_id": "HumanEval/71", "completion": "import math\n\nif a + b > c and a + c > b and b + c > a:\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\nelse:\n    return -1\n    "}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n\n                        "}
{"task_id": "HumanEval/73", "completion": "changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n    "}
{"task_id": "HumanEval/74", "completion": "total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    else:\n        return lst2\n    "}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom sympy import isprime\n\n    primes = [i for i in range(2, 100) if isprime(i)]\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    return False\n    "}
{"task_id": "HumanEval/76", "completion": "if n <= 1:\n        return x == 1\n    power = 0\n    while True:\n        result = n ** power\n        if result == x:\n            return True\n        elif result > x:\n            return False\n        power += 1\n    "}
{"task_id": "HumanEval/77", "completion": "return round(a ** (1/3)) ** 3 == a\n    "}
{"task_id": "HumanEval/78", "completion": "prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_digits:\n            count += 1\n    return count\n    "}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]  # Convert to binary and strip the '0b' prefix\n    return f\"db{binary}db\"      # Format the string with 'db' at both ends\n    "}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n    "}
{"task_id": "HumanEval/81", "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n    "}
{"task_id": "HumanEval/82", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nreturn is_prime(len(string))\n    "}
{"task_id": "HumanEval/83", "completion": "if n == 1:\n        return 1  # only the number '1'\n    count_start = 10**(n-1)\n    count_end = 9 * 10**(n-2)\n    count_both = 10**(n-2)\n    return count_start + count_end - count_both\n    "}
{"task_id": "HumanEval/84", "completion": "binary_representation = bin(N)[2:]  # Convert to binary and remove the '0b' prefix\n    digit_sum = sum(int(digit) for digit in binary_representation)  # Sum the binary digits\n    return bin(digit_sum)[2:]  # Convert the sum to binary and remove the '0b' prefix\n    "}
{"task_id": "HumanEval/85", "completion": "total = 0\n    for i in range(1, len(lst), 2):  # start from index 1 and step by 2\n        if lst[i] % 2 == 0:  # check if the element is even\n            total += lst[i]\n    return total\n    "}
{"task_id": "HumanEval/86", "completion": "words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n    "}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort first by row (i) and then by column (j) in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n                        "}
{"task_id": "HumanEval/88", "completion": "if not array:  # Handle the empty array case\n        return []\n    \n    first_element = array[0]\n    last_element = array[-1]\n    sum_of_elements = first_element + last_element\n    \n    # Sort based on the sum being odd or even\n    if sum_of_elements % 2 == 0:\n        return sorted(array, reverse=True)  # Even sum: descending order\n    else:\n        return sorted(array)  # Odd sum: ascending order\n    "}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            # Shift character by 8 positions (2 multiplied by 4)\n            new_char = chr((ord(char) - ord('a') + 8) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 8) % 26 + ord('A'))\n            encrypted_string += new_char\n    return encrypted_string\n                        "}
{"task_id": "HumanEval/90", "completion": "unique_elements = sorted(set(lst))\n    return unique_elements[1] if len(unique_elements) > 1 else None\n    "}
{"task_id": "HumanEval/91", "completion": "    # Split the string into sentences\n    sentences = re.split(r'[.!?]', S)\n    # Count sentences that start with the word \"I\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n    return count\n    "}
{"task_id": "HumanEval/92", "completion": "if all(isinstance(i, int) for i in (x, y, z)): \n        return x == y + z or y == x + z or z == x + y\n    return False\n    "}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char in vowels:\n                encoded_message += vowels[char]  # Replace vowel\n            else:\n                encoded_message += char.swapcase()  # Swap case for consonants\n        else:\n            encoded_message += char  # Keep non-letter characters unchanged\n\n    return encoded_message\n                        "}
{"task_id": "HumanEval/94", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nlargest_prime = max((x for x in lst if is_prime(x)), default=None)\n\nif largest_prime is not None:\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\nelse:\n    sum_of_digits = 0  # Or handle the case where there are no primes differently\n\nreturn sum_of_digits\n    "}
{"task_id": "HumanEval/95", "completion": "if not dict:  # Check for empty dictionary\n        return False\n\n    keys = list(dict.keys())\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n\n    return all_lower or all_upper\n    "}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for divisor in range(2, int(num**0.5) + 1):\n            if num % divisor == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n                        "}
{"task_id": "HumanEval/97", "completion": "    return (abs(a) % 10) * (abs(b) % 10)\n                        "}
{"task_id": "HumanEval/98", "completion": "return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')\n    "}
{"task_id": "HumanEval/99", "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n    "}
{"task_id": "HumanEval/100", "completion": "levels = []\n    current_stones = n\n    for i in range(n):\n        levels.append(current_stones)\n        if n % 2 == 0:  # n is even\n            current_stones += 2\n        else:           # n is odd\n            current_stones += 2\n    return levels\n    "}
{"task_id": "HumanEval/101", "completion": "return [word.strip() for word in s.replace(',', ' ').split() if word]\n    "}
{"task_id": "HumanEval/102", "completion": "if x > y:\n        return -1\n    \n    for number in range(y, x - 1, -1):\n        if number % 2 == 0:\n            return number\n    \n    return -1\n    "}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n    "}
{"task_id": "HumanEval/104", "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n    "}
{"task_id": "HumanEval/105", "completion": "filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", \n        4: \"Four\", 5: \"Five\", 6: \"Six\", \n        7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    return [num_to_word[num] for num in reversed_arr]\n    "}
{"task_id": "HumanEval/106", "completion": "result = []\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        # Calculate factorial\n        fact = 1\n        for j in range(1, i + 1):\n            fact *= j\n        result.append(fact)\n    else:\n        # Calculate sum from 1 to i\n        sum_odd = sum(range(1, i + 1))\n        result.append(sum_odd)\nreturn result\n    "}
{"task_id": "HumanEval/107", "completion": "even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n    "}
{"task_id": "HumanEval/108", "completion": "        return sum(int(d) if n >= 0 else int(d) * (-1 if i == 0 else 1) for i, d in enumerate(str(abs(n))))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)\n    "}
{"task_id": "HumanEval/109", "completion": "if not arr:\n    return True\n\ncount = 0\nn = len(arr)\n\nfor i in range(n):\n    if arr[i] > arr[(i + 1) % n]:\n        count += 1\n    if count > 1:\n        return False\n\nreturn True\n    "}
{"task_id": "HumanEval/110", "completion": "if any(x % 2 != 0 for x in lst1):\n        if any(x % 2 == 0 for x in lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"YES\"\n    "}
{"task_id": "HumanEval/111", "completion": "from collections import defaultdict\n\n    if not test:\n        return {}\n    \n    counts = defaultdict(int)\n    for letter in test.split():\n        counts[letter] += 1\n    \n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n\n    return result\n    "}
{"task_id": "HumanEval/112", "completion": "filtered = ''.join([char for char in s if char not in c])\n    is_palindrome = filtered == filtered[::-1]\n    return (filtered, is_palindrome)\n    "}
{"task_id": "HumanEval/113", "completion": "result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char in '13579')\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n    "}
{"task_id": "HumanEval/114", "completion": "min_sum = float('inf')\n    n = len(nums)\n\n    for start in range(n):\n        current_sum = 0\n        for end in range(start, n):\n            current_sum += nums[end]\n            min_sum = min(min_sum, current_sum)\n\n    return min_sum\n    "}
{"task_id": "HumanEval/115", "completion": "total_lowers = 0\n    for row in grid:\n        water_count = sum(row)  # Count number of 1's in the row\n        if water_count > 0:\n            lowers_for_row = math.ceil(water_count / capacity)  # Calculate lowers needed for this row\n            total_lowers += lowers_for_row\n    return total_lowers\n    "}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    "}
{"task_id": "HumanEval/117", "completion": "        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    return [word for word in s.split() if count_consonants(word) == n]\n    "}
{"task_id": "HumanEval/118", "completion": "vowels = \"aeiouAEIOU\"\n    length = len(word)\n    \n    for i in range(length - 2, 0, -1):  # Start from the second last character and go backwards\n        if word[i] in vowels and word[i - 1].isalpha() and word[i + 1].isalpha() and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n    "}
{"task_id": "HumanEval/119", "completion": "# Count the parentheses in both strings\nopen_count_1 = lst[0].count('(')\nclose_count_1 = lst[0].count(')')\nopen_count_2 = lst[1].count('(')\nclose_count_2 = lst[1].count(')')\n\n# Check the conditions for both concatenation orders\n    # Checking for the first order lst[0] + lst[1]\n    net_open = open1 - close1\n    net_close = open2 - close2\n    return net_open >= 0 and net_open + net_close >= 0\n\ncan_form_good = (is_good(open_count_1, close_count_1, open_count_2, close_count_2) or\n                 is_good(open_count_2, close_count_2, open_count_1, close_count_1))\n\nreturn 'Yes' if can_form_good else 'No'\n    "}
{"task_id": "HumanEval/120", "completion": "arr.sort(reverse=True)\n    return sorted(arr[:k])\n    "}
{"task_id": "HumanEval/121", "completion": "return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n    "}
{"task_id": "HumanEval/122", "completion": "return sum(x for x in arr[:k] if -99 <= x <= 99)\n    "}
{"task_id": "HumanEval/123", "completion": "odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)  # Append 1, since Collatz(1) is [1]\n    return sorted(odd_numbers)\n    "}
{"task_id": "HumanEval/124", "completion": "if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    else:  # February\n        if day > 29:\n            return False\n\n    return True\n    "}
{"task_id": "HumanEval/125", "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n    "}
{"task_id": "HumanEval/126", "completion": "if len(lst) <= 1:\n        return True\n\n    seen = set()\n    prev = -1  # Initialize to a value smaller than any possible list element\n\n    for num in lst:\n        if num in seen or num < prev:\n            return False\n        seen.add(num)\n        prev = num\n\n    return True\n    "}
{"task_id": "HumanEval/127", "completion": "        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start >= end:\n        return \"NO\"\n    \n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"\n    "}
{"task_id": "HumanEval/128", "completion": "if not arr:\n    return None\n\nproduct_of_signs = 1\nsum_of_magnitudes = 0\n\nfor number in arr:\n    if number > 0:\n        sum_of_magnitudes += number\n    elif number < 0:\n        sum_of_magnitudes += -number\n        product_of_signs *= -1\n    else:\n        product_of_signs = 0\n\nreturn sum_of_magnitudes * product_of_signs\n    "}
{"task_id": "HumanEval/129", "completion": "paths = []\nfor i in range(len(grid)):\n    for j in range(len(grid[0])):\n        dfs(i, j, [grid[i][j]])\n\n# Find the lexicographically smallest path\nmin_path = min(paths)\nreturn min_path\n    "}
{"task_id": "HumanEval/130", "completion": "sequence = []\n\nfor i in range(n + 1):\n    if i == 1:\n        sequence.append(3)\n    elif i % 2 == 0:\n        sequence.append(1 + i / 2)\n    else:\n        tri_i_minus_1 = sequence[i - 1] if i - 1 >= 0 else 0\n        tri_i_minus_2 = sequence[i - 2] if i - 2 >= 0 else 0\n        tri_i_plus_1 = sequence[i + 1] if i + 1 <= n else 0\n        \n        sequence.append(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1)\n\nreturn sequence\n    "}
{"task_id": "HumanEval/131", "completion": "product = 1\n    found_odd = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            found_odd = True\n            \n    return product if found_odd else 0\n    "}
{"task_id": "HumanEval/132", "completion": "stack = []\n    has_nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) > 1:  # More than one '[' means potential for nesting\n                has_nested = True\n        elif char == ']':\n            if stack:  # Only pop if there's a matching '['\n                stack.pop()\n\n    return has_nested and not stack  # Return True if nested and all brackets are closed\n    "}
{"task_id": "HumanEval/133", "completion": "import math\n\nreturn sum(math.ceil(x) ** 2 for x in lst)\n    "}
{"task_id": "HumanEval/134", "completion": "if not txt or txt[-1] == ' ':\n        return False\n    txt = txt.rstrip()  # Remove trailing spaces\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')\n    "}
{"task_id": "HumanEval/135", "completion": "largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n    "}
{"task_id": "HumanEval/136", "completion": "largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n    "}
{"task_id": "HumanEval/137", "completion": "if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        b = float(b)\n    \n    if a == b:\n        return None\n    return a if a > b else b\n    "}
{"task_id": "HumanEval/138", "completion": "if n < 8:\n        return False\n    return n % 2 == 0\n    "}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result\n                        "}
{"task_id": "HumanEval/140", "completion": "    return '-'.join(['_'.join(part.split()) for part in text.split('   ')])\n                        "}
{"task_id": "HumanEval/141", "completion": "# Check for the number of digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n\n    # Split the file name by dot\n    parts = file_name.split('.')\n    if len(parts) != 2:  # It should have exactly one dot, resulting in two parts\n        return 'No'\n\n    name, ext = parts\n    # Check the first part of the name\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check the extension\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n    "}
{"task_id": "HumanEval/142", "completion": "total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum\n    "}
{"task_id": "HumanEval/143", "completion": "result = \" \".join(word for word in sentence.split() if is_prime(len(word)))\n    "}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    result = x_fraction * n_fraction\n    return result.denominator == 1\n    "}
{"task_id": "HumanEval/145", "completion": "        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n    "}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n                        "}
{"task_id": "HumanEval/147", "completion": "from itertools import combinations\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i, j, k in combinations(range(n), 3):\n        if (a[i] + a[j] + a[k]) % 3 == 0:\n            count += 1\n    return count\n    "}
{"task_id": "HumanEval/148", "completion": "planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    start_index, end_index = sorted((index1, index2))\n\n    return tuple(planets[start_index + 1:end_index])\n    "}
{"task_id": "HumanEval/149", "completion": "filtered_list = [s for s in lst if len(s) % 2 == 0]\nsorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\nreturn sorted_list\n    "}
{"task_id": "HumanEval/150", "completion": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nif is_prime(n):\n    return x\nelse:\n    return y\n    "}
{"task_id": "HumanEval/151", "completion": "if not lst:\n        return 0\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)\n    "}
{"task_id": "HumanEval/152", "completion": "return [abs(s - g) for s, g in zip(game, guess)]\n    "}
{"task_id": "HumanEval/153", "completion": "strongest_extension = \"\"\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n    "}
{"task_id": "HumanEval/154", "completion": "rotations = [b[i:] + b[:i] for i in range(len(b))]\n    return any(rotation in a for rotation in rotations)\n    "}
{"task_id": "HumanEval/155", "completion": "num = str(abs(num))\n    even_count = sum(1 for digit in num if int(digit) % 2 == 0)\n    odd_count = len(num) - even_count\n    return (even_count, odd_count)\n    "}
{"task_id": "HumanEval/156", "completion": "roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = []\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result.append(symbol)\n            number -= value\n    return ''.join(result)\n    "}
{"task_id": "HumanEval/157", "completion": "sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n    "}
{"task_id": "HumanEval/158", "completion": "unique_counts = {word: len(set(word)) for word in words}\n    max_unique = max(unique_counts.values(), default=0)\n    candidates = [word for word, count in unique_counts.items() if count == max_unique]\n    return min(candidates) if candidates else \"\"\n    "}
{"task_id": "HumanEval/159", "completion": "total_eaten = number + min(need, remaining)\n    remaining_after_eat = remaining - min(need, remaining)\n    return [total_eaten, remaining_after_eat]\n    "}
{"task_id": "HumanEval/160", "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)\n    "}
{"task_id": "HumanEval/161", "completion": "if any(c.isalpha() for c in s):  # Check if there's at least one letter\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n    else:  # If there are no letters, reverse the string\n        return s[::-1]\n    "}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n    "}
{"task_id": "HumanEval/163", "completion": "start = min(a, b)\n    end = max(a, b)\n    return sorted([i for i in range(start, end + 1) if i % 2 == 0])\n    "}
