{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n", "result": "failed: unindent does not match any outer indentation level (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Step 1: Remove spaces\n    result = []\n    stack = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            if not stack:  # Starting a new group\n                current_group = []  # Reset current group\n            stack.append(char)\n            current_group.append(char)  # Add to current group\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)  # Add to current group\n            if not stack:  # If stack is empty, a complete group is found\n                result.append(''.join(current_group))  # Add to result\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "mean_value = sum(numbers) / len(numbers)  # Calculate mean\ndeviations = [abs(x - mean_value) for x in numbers]  # Calculate absolute differences\nreturn sum(deviations) / len(deviations)  # Calculate and return MAD\n", "result": "failed: 'return' outside function (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Don't add delimeter after the last element\n            result.append(delimeter)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    groups = paren_string.split()\n\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        depths.append(max_depth)\n\n    return depths\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]\n", "result": "failed: 'return' outside function (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    rolling_max_list = []\n\n    for number in numbers:\n        if number > max_so_far:\n            max_so_far = number\n        rolling_max_list.append(max_so_far)\n\n    return rolling_max_list\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n            \n    return string\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "result": "failed: name 'a' is not defined", "passed": false}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(1, len(string) + 1)]\n", "result": "failed: 'return' outside function (<string>, line 9)", "passed": false}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n + 1))\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    note_duration_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    durations = [note_duration_map[note] for note in notes]\n    \n    return durations\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow for overlapping\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    words = numbers.split()\n    sorted_numbers = sorted(words, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "return [(num - min_val) / (max_val - min_val) for num in numbers]\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]\n", "result": "failed: 'return' outside function (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/23", "completion": "return len(string)\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/24", "completion": "for i in range(n - 1, 0, -1):\n    if n % i == 0:\n        return i\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    \n    return [number for number in numbers if counts[number] == 1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "return string.swapcase()\n", "result": "failed: 'return' outside function (<string>, line 8)", "passed": false}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero finds x such that poly(x) = 0.\n    \"\"\"\n    # Contains the polynomial function\n    def poly_derivative(xs, x):\n        \"\"\" Evaluates the derivative of polynomial with coefficients xs at point x. \"\"\"\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\n    # Starting guess can be 0\n    x0 = 0.0\n    tolerance = 1e-7\n    max_iterations = 1000\n    for _ in range(max_iterations):\n        fx = poly(xs, x0)\n        dfx = poly_derivative(xs, x0)\n        \n        if dfx == 0:  # Prevent division by zero\n            break\n        \n        x1 = x0 - fx / dfx\n        if abs(x1 - x0) < tolerance:  # Check for convergence\n            return x1\n        x0 = x1\n    \n    return x0  # Return the last approximation\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    \n    result = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))\n", "result": "failed: 'return' outside function (<string>, line 8)", "passed": false}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "count = 0\nfor i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n        count += str(i).count('7')\nreturn count\n", "result": "failed: 'return' outside function (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted(l[i] for i in range(0, len(l), 2))\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "result": "failed: unexpected indent (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib1, fib2 = 0, 1\n    prime_fib_count = 0\n    current_prime_fib = None\n\n    while prime_fib_count < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            prime_fib_count += 1\n            current_prime_fib = fib2\n\n    return current_prime_fib\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    n = len(l)\n    for i in range(n):\n        s = set()\n        current_sum = -l[i]\n        for j in range(i + 1, n):\n            if (current_sum - l[j]) in s:\n                return True\n            s.add(l[j])\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 for x in l]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result  # Prepend remainder to the result\n        x //= base  # Divide x by base\n    return result if result else \"0\"  # Handle case where x is 0\n", "result": "failed: unexpected indent (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4]\n        fib_sequence.append(next_value)\n\n    return fib_sequence[n]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:  # odd length\n        return l[n // 2]\n    else:  # even length\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "result": "failed: unexpected indent (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]\n", "result": "failed: 'return' outside function (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)\n", "result": "failed: 'return' outside function (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "for number in l:\n    if number >= t:\n        return False\nreturn True\n", "result": "failed: 'return' outside function (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/53", "completion": "return x + y\n", "result": "failed: 'return' outside function (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/54", "completion": "return set(s0) == set(s1)\n", "result": "failed: 'return' outside function (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/55", "completion": "if n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b\n", "result": "failed: unindent does not match any outer indentation level (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    largest_factor = 1\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # n must be odd at this point, thus check for odd factors from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # This condition is to check if n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int, memo={0: 0, 1: 0, 2: 1}):\n    if n in memo:\n        return memo[n]\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiou'\n    \n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    length = len(s)\n    \n    if shift > length:\n        return s[::-1]\n    \n    shift = shift % length\n    return s[-shift:] + s[:-shift]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])  \n    oranges = int(s.split()[3])  \n    \n    mangoes = n - apples - oranges\n    return mangoes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:  # Check if it's the smallest even value\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_index == -1:  # No even numbers found\n        return []\n    \n    return [smallest_even, smallest_index]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    \n    # Count frequency of each number\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    # Check for the greatest integer that meets the condition\n    for num in sorted(frequency.keys(), reverse=True):\n        if frequency[num] >= num:\n            return num\n            \n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    min_ptr, max_ptr = 0, len(lst) - 1\n    \n    while min_ptr <= max_ptr:\n        if min_ptr == max_ptr:\n            result.append(lst[min_ptr])\n        else:\n            result.append(lst[min_ptr])\n            result.append(lst[max_ptr])\n        \n        min_ptr += 1\n        max_ptr -= 1\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:  # Check validity\n            s = (a + b + c) / 2  # Semi-perimeter\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n            return round(area, 2)  # Return area rounded to 2 decimal points\n        return -1  # Not a valid triangle\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [prime(i) for i in range(1, 30) if prime(i) < 100]\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    return False\n", "result": "failed: name 'prime' is not defined", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n <= 1:\n        return x == n\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "return round(abs(a) ** (1/3)) ** 3 == abs(a)\n", "result": "failed: 'return' outside function (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/78", "completion": "prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\ncount = 0\n\nfor digit in num:\n    if digit in prime_hex_digits:\n        count += 1\n\nreturn count\n", "result": "failed: 'return' outside function (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) < 3:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n <= 0:\n        return 0\n    # Numbers starting with 1\n    start_with_1 = 10**(n-1)  # 1 followed by (n-1) zeros\n    # Numbers ending with 1\n    end_with_1 = 10**(n-1)\n\n    # Counting overlaps (i.e., numbers that both start and end with 1)\n    # These are of the form 1...1, and there are (n-2) digits in between\n    overlap_count = 10**(n-2) if n > 1 else 1\n\n    return start_with_1 + end_with_1 - overlap_count\n                    ", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if not (0 <= N <= 10000):\n        raise ValueError(\"N must be between 0 and 10000\")\n\n    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total += value\n    return total\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    result = []\n    for word in s.split(' '):\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "coordinates = []\n\nfor row_index, row in enumerate(lst):\n    for col_index, value in enumerate(row):\n        if value == x:\n            coordinates.append((row_index, col_index))\n\ncoordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\nreturn coordinates\n", "result": "failed: 'return' outside function (<string>, line 31)", "passed": false}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sum_first_last = array[0] + array[-1] if array else 0\n    return sorted(array) if sum_first_last % 2 != 0 else sorted(array, reverse=True)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':  # Check if char is a lowercase letter\n            new_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result += new_char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "sentences = [s.strip() for s in re.split(r'[.!?]', S) if s]  # Split into sentences\nreturn sum(1 for sentence in sentences if sentence.startswith(\"I\"))  # Count \"I\"-starting sentences\n", "result": "failed: 'return' outside function (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return all(isinstance(i, int) for i in (x, y, z)) and (\n        x == y + z or y == x + z or z == x + y\n    )\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    result = []\n    for char in message:\n        if char in vowels:\n            result.append(vowels[char])\n        elif char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = None\n    \n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is None:\n        return 0  # or some other default value if there's no prime\n    \n    return sum(int(digit) for digit in str(largest_prime))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:  # Check if the dictionary is empty\n        return False\n    \n    keys = d.keys()  # Get all keys from the dictionary\n    all_lower = all(isinstance(k, str) and k.islower() for k in keys)  # Check if all keys are lower case\n    all_upper = all(isinstance(k, str) and k.isupper() for k in keys)  # Check if all keys are upper case\n    \n    return all_lower or all_upper  # Return True if either condition is met\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    return [i for i in range(2, n) if is_prime(i)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "number = float(value)\n    floor_value = int(number)  # Get the floor value of the number\n    ceil_value = floor_value + 1  # Get the ceiling value\n    \n    if number - floor_value < 0.5:\n        return floor_value\n    elif number - floor_value > 0.5:\n        return ceil_value\n    else:  # number - floor_value == 0.5\n        return ceil_value if number > 0 else floor_value\n", "result": "failed: unexpected indent (<string>, line 21)", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    \n    for i in range(n):\n        stones.append(current_stones)\n        if current_stones % 2 == 0:  # current_stones is even\n            current_stones += 2      # next level will have the next even number\n        else:\n            current_stones += 2      # next level will have the next odd number\n            \n    return stones\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.split(r'[ ,]+', s)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    lower = min(x, y)\n    upper = max(x, y)\n    \n    for num in range(upper, lower - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "result = []\nfor num in x:\n    if all(int(digit) % 2 != 0 for digit in str(num)):  # Check if all digits are odd\n        result.append(num)\nreturn sorted(result)\n", "result": "failed: 'return' outside function (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    filtered = [x for x in arr if 1 <= x <= 9]  # Step 1: Filter numbers\n    sorted_arr = sorted(filtered)                # Step 2: Sort the array\n    reversed_arr = sorted_arr[::-1]             # Step 3: Reverse the array\n\n    # Step 4: Map integers to their names\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [number_names[x - 1] for x in reversed_arr]  # Step 5: Replace with names\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "result = []\nfor i in range(1, n + 1):\n    if i % 2 == 0:  # i is even\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result.append(factorial)\n    else:  # i is odd\n        sum_odd = sum(range(1, i + 1))\n        result.append(sum_odd)\nreturn result\n", "result": "failed: 'return' outside function (<string>, line 21)", "passed": false}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    odd_count = 0\n    even_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) if num >= 0 else -int(digit) for digit in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    descents = 0\n    n = len(arr)\n\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:  # Use modulo to wrap around\n            descents += 1\n\n    return descents <= 1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_count <= even_count_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    \n    # Split the input string into letters and count occurrences\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    if not counts:\n        return {}\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Gather all letters with the maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)  # Step 1: Remove characters\n    is_palindrome = result == result[::-1]                 # Step 2: Check for palindrome\n    return result, is_palindrome                             # Step 3: Return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char in '13579')\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = 0\n    \n    # Count total water in the grid\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of times to lower buckets\n    return math.ceil(total_water / capacity)\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    last_consonants = []\n    \n    # Traverse the string from right to left\n    for char in reversed(word):\n        if char in vowels:\n            # Check for vowels between two consonants\n            if len(last_consonants) == 2:\n                return char\n        elif char.isalpha():  # It is a consonant\n            last_consonants.append(char)\n            # Keep only the last two consonants\n            if len(last_consonants) > 2:\n                last_consonants.pop(0)\n\n    return \"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst\n\n    def is_balanced(s1, s2):\n        count = 0\n        for char in s1 + s2:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if is_balanced(s1, s2) or is_balanced(s2, s1) else 'No'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(sorted(arr)[-k:])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "total_sum = sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\nreturn total_sum\n", "result": "failed: 'return' outside function (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    \n    while n != 1:\n        if n % 2 != 0:  # n is odd\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    \n    odd_numbers.append(1)  # Append 1 as it's also considered odd\n    return sorted(odd_numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    if date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n        \n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if any(char.isspace() for char in txt):\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Calculate the intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n\n    # Check if there is an intersection\n    if start_intersection >= end_intersection:\n        return \"NO\"\n\n    # Calculate length of the intersection\n    length = end_intersection - start_intersection\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the intersection is prime\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sum_of_magnitudes += num\n        elif num < 0:\n            sum_of_magnitudes += -num\n            product_of_signs *= -1\n        else:  # num == 0\n            product_of_signs = 0\n    \n    return sum_of_magnitudes * product_of_signs\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from itertools import product\n    \n    n = len(grid)\n    best_path = []\n\n    def dfs(r, c, path):\n        nonlocal best_path\n        \n        if len(path) == k:\n            if not best_path or path < best_path:\n                best_path = path[:]\n            return\n        \n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                path.append(grid[nr][nc])\n                dfs(nr, nc, path)\n                path.pop()\n\n    for i, j in product(range(n), repeat=2):\n        dfs(i, j, [grid[i][j]])\n\n    return best_path\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = []\n    \n    for i in range(n + 1):\n        if i == 0:\n            tribonacci.append(1)\n        elif i == 1:\n            tribonacci.append(3)\n        elif i % 2 == 0:  # Even\n            tribonacci.append(1 + i / 2)\n        else:  # Odd\n            tribonacci.append(\n                tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1] if (i + 1 <= n) else tribonacci[i - 1] + tribonacci[i - 2]\n            )\n            \n    return tribonacci\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    return product if has_odd else 0\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                top = stack.pop()\n                if stack:  # Check if there are still brackets in the stack\n                    nested = True  # We found a nested bracket\n            else:\n                return False  # More closing brackets than opening\n\n    # If there are still items in stack, that means we have unmatched opening brackets\n    return nested\n\n# Example tests\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if len(txt) == 0:   # Check if the string is empty\n        return False\n    last_char = txt[-1] # Get the last character\n\n    # Check if last_char is a letter and is not part of a word\n    return last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' ')\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n", "result": "failed: unindent does not match any outer indentation level (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/136", "completion": "largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return (largest_negative, smallest_positive)\n", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')  \n        return float(value)\n\n    try:\n        float_a = to_float(a)\n        float_b = to_float(b)\n    except ValueError:\n        return None\n\n    if float_a > float_b:\n        return a\n    elif float_a < float_b:\n        return b\n    else:\n        return None\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            result = 1\n            for i in range(2, x + 1):\n                result *= i\n            return result\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    import re\n    text = text.lstrip(' ')\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    if text.startswith('_'):\n        text = '_' + text.strip('_')\n    return text\n", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check for one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the name into the part before and after the dot\n    name_part, ext_part = file_name.split('.')\n    \n    # Check if the name part is empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check for valid file extensions\n    valid_extensions = ['txt', 'exe', 'dll']\n    if ext_part not in valid_extensions:\n        return 'No'\n    \n    # Count the digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    result_numerator = num1 * num2\n    result_denominator = denom1 * denom2\n    \n    return result_numerator % result_denominator == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\ncount = 0\n\n# Iterate through all possible triples\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            if (a[i] + a[j] + a[k]) % 3 == 0:\n                count += 1\n                \nreturn count\n", "result": "failed: 'return' outside function (<string>, line 26)", "passed": false}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length and then alphabetically\n    sorted_list = sorted(filtered, key=lambda x: (len(x), x))\n    return sorted_list\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    odd_squares_sum = sum(x ** 2 for x in lst if x >= 0 and x % 2 == 1)\n    return odd_squares_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    max_strength = float('-inf')  # Initialize to negative infinity to find the max\n\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:  # Update if this extension is stronger\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) == 0:\n        return True\n    return any(b[i:i+len(b)] in a for i in range(len(b)))\n", "result": "failed: test #0", "passed": false}
{"task_id": "HumanEval/155", "completion": "even_count = 0\n    odd_count = 0\n\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n", "result": "failed: unexpected indent (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = \"\"\n    \n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "sides = sorted([a, b, c])\nreturn sides[0]**2 + sides[1]**2 == sides[2]**2\n", "result": "failed: 'return' outside function (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_count = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if (unique_chars > max_unique_count or \n            (unique_chars == max_unique_count and word < max_word)):\n            max_word = word\n            max_unique_count = unique_chars\n            \n    return max_word\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number\n    if need <= remaining:\n        total_eaten += need\n        remaining -= need\n    else:\n        total_eaten += remaining\n        remaining = 0\n    return [total_eaten, remaining]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if there are any letters in the input string\n    has_letter = any(c.isalpha() for c in s)\n\n    if not has_letter:\n        # Reverse the string if no letters are present\n        return s[::-1]\n    else:\n        # Create a list to hold the new characters\n        result = []\n        # Iterate through each character in the string\n        for c in s:\n            if c.isalpha():\n                # Reverse case for letters\n                if c.islower():\n                    result.append(c.upper())\n                else:\n                    result.append(c.lower())\n            else:\n                # Keep non-letter characters as they are\n                result.append(c)\n        return ''.join(result)\n                    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    lower = min(a, b)\n    upper = max(a, b)\n    return [n for n in range(lower, upper + 1) if n % 2 == 0]\n", "result": "failed: Test 1", "passed": false}
